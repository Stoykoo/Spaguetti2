- name: Instalar .NET Core 8 y configurar la aplicación de reservas de hotel
  hosts: 127.0.0.1
  connection: local
  become: yes
  tasks:
    # Actualiza el sistema operativo
    - name: Actualizar el sistema
      apt:
        update_cache: yes
        upgrade: dist

    # Instala dependencias necesarias
    - name: Instalar dependencias necesarias
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present

    # Descarga el paquete de repositorio de Microsoft para Ubuntu 24.04 LTS
    - name: Descargar el paquete de repositorio de Microsoft para Ubuntu 24.04 LTS
      get_url:
        url: https://packages.microsoft.com/config/ubuntu/24.04/packages-microsoft-prod.deb
        dest: /tmp/packages-microsoft-prod.deb

    # Instala el paquete de repositorio de Microsoft
    - name: Instalar el paquete de repositorio de Microsoft
      command: dpkg -i /tmp/packages-microsoft-prod.deb

    # Actualiza el caché de apt después de agregar el repositorio
    - name: Actualizar el caché de apt después de agregar el repositorio
      apt:
        update_cache: yes

    # Instala .NET SDK
    - name: Instalar .NET SDK
      apt:
        name: dotnet-sdk-8.0
        state: present

    # Crea el directorio para la aplicación de reservas de hotel
    - name: Crear directorio para la aplicación de reservas de hotel
      file:
        path: /home/ubuntu/hotel_booking_app
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    # Crea el archivo del proyecto HotelBooking.csproj
    - name: Crear archivo del proyecto HotelBooking.csproj
      copy:
        dest: /home/ubuntu/hotel_booking_app/HotelBooking.csproj
        owner: ubuntu
        group: ubuntu
        mode: '0644'
        content: |
          <Project Sdk="Microsoft.NET.Sdk.Web">
            <PropertyGroup>
              <TargetFramework>net8.0</TargetFramework>
            </PropertyGroup>
          </Project>

    # Crea el archivo Program.cs
    - name: Crear archivo Program.cs
      copy:
        dest: /home/ubuntu/hotel_booking_app/Program.cs
        owner: ubuntu
        group: ubuntu
        mode: '0644'
        content: |
          // Programa principal que configura y ejecuta el host web
          using System;
          using Microsoft.AspNetCore.Hosting;
          using Microsoft.Extensions.Hosting;

          namespace HotelBooking
          {
              public class Program
              {
                  public static void Main(string[] args)
                  {
                      CreateHostBuilder(args).Build().Run();
                  }

                  public static IHostBuilder CreateHostBuilder(string[] args) =>
                      Host.CreateDefaultBuilder(args)
                          .ConfigureWebHostDefaults(webBuilder =>
                          {
                              webBuilder.UseStartup<Startup>();
                          });
              }
          }

    # Crea el archivo Startup.cs
    - name: Crear archivo Startup.cs
      copy:
        dest: /home/ubuntu/hotel_booking_app/Startup.cs
        owner: ubuntu
        group: ubuntu
        mode: '0644'
        content: |
          // Clase de inicio que configura los servicios y el pipeline de la aplicación
          using Microsoft.AspNetCore.Builder;
          using Microsoft.AspNetCore.Hosting;
          using Microsoft.Extensions.DependencyInjection;
          using Microsoft.Extensions.Hosting;

          namespace HotelBooking
          {
              public class Startup
              {
                  // Método para configurar los servicios
                  public void ConfigureServices(IServiceCollection services)
                  {
                      services.AddControllers();
                      // Singleton para gestionar la instancia de Hotel como recurso global
                      services.AddSingleton<Hotel>();
                      services.AddScoped<ReservationManager>();
                      // Strategy Pattern para definir diferentes estrategias de reserva
                      services.AddSingleton<IReservationStrategy, StandardReservationStrategy>();
                      // Observer Pattern para notificar cambios en las reservas
                      services.AddSingleton<IReservationObserver, CleaningService>();
                  }

                  // Método para configurar el pipeline de la aplicación
                  public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
                  {
                      if (env.IsDevelopment())
                      {
                          app.UseDeveloperExceptionPage();
                      }
                      else
                      {
                          app.UseExceptionHandler("/Home/Error");
                          app.UseHsts();
                      }

                      app.UseRouting();
                      app.UseAuthorization();

                      app.UseEndpoints(endpoints =>
                      {
                          endpoints.MapControllers();
                      });
                  }
              }
          }

    # Crea la clase Hotel.cs
    - name: Crear clase Hotel.cs
      copy:
        dest: /home/ubuntu/hotel_booking_app/Hotel.cs
        owner: ubuntu
        group: ubuntu
        mode: '0644'
        content: |
          // Singleton Pattern: Clase Hotel
          using System;
          using System.Collections.Generic;

          namespace HotelBooking
          {
              // Singleton para gestionar la instancia de Hotel como recurso global
              public sealed class Hotel
              {
                  // Instancia única de Hotel (Singleton)
                  private static readonly Lazy<Hotel> instance = new Lazy<Hotel>(() => new Hotel());

                  public string Name { get; private set; }
                  public List<Room> Rooms { get; private set; }

                  // Constructor privado para prevenir instanciación externa
                  private Hotel()
                  {
                      Name = "Luxury Inn";
                      Rooms = new List<Room>();
                  }

                  // Propiedad para acceder a la instancia única
                  public static Hotel Instance
                  {
                      get
                      {
                          return instance.Value;
                      }
                  }

                  public void AddRoom(Room room)
                  {
                      Rooms.Add(room);
                      Console.WriteLine($"Added {room.RoomType} room at ${room.Price} per night.");
                  }

                  public void PrintAvailableRooms()
                  {
                      Console.WriteLine("\nAvailable Rooms:");
                      foreach (var room in Rooms)
                      {
                          Console.WriteLine($"Room: {room.RoomType}, Price: ${room.Price}");
                      }
                  }
              }

              // Clase Room
              public class Room
              {
                  public string RoomType { get; set; }
                  public double Price { get; set; }
              }
          }

    # Crea la clase RoomFactory.cs
    - name: Crear clase RoomFactory.cs
      copy:
        dest: /home/ubuntu/hotel_booking_app/RoomFactory.cs
        owner: ubuntu
        group: ubuntu
        mode: '0644'
        content: |
          // Factory Method para encapsular la creación de habitaciones
          using System;

          namespace HotelBooking
          {
              // Clase abstracta para el Factory Method
              public abstract class RoomFactory
              {
                  public abstract Room CreateRoom();
              }

              // Implementación concreta para habitación individual
              public class SingleRoomFactory : RoomFactory
              {
                  public override Room CreateRoom()
                  {
                      return new Room { RoomType = "Single", Price = 100 };
                  }
              }

              // Implementación concreta para habitación doble
              public class DoubleRoomFactory : RoomFactory
              {
                  public override Room CreateRoom()
                  {
                      return new Room { RoomType = "Double", Price = 200 };
                  }
              }

              // Implementación concreta para suite
              public class SuiteRoomFactory : RoomFactory
              {
                  public override Room CreateRoom()
                  {
                      return new Room { RoomType = "Suite", Price = 300 };
                  }
              }
          }

    # Crea interfaces y clases para Strategy Pattern
    - name: Crear interfaces y clases para Strategy Pattern
      copy:
        dest: /home/ubuntu/hotel_booking_app/IReservationStrategy.cs
        owner: ubuntu
        group: ubuntu
        mode: '0644'
        content: |
          // Strategy Pattern para definir diferentes estrategias de reserva
          using System;

          namespace HotelBooking
          {
              // Interfaz para la estrategia de reserva
              public interface IReservationStrategy
              {
                  void Reserve(Room room, DateTime startDate, DateTime endDate);
              }

              // Estrategia estándar de reserva
              public class StandardReservationStrategy : IReservationStrategy
              {
                  public void Reserve(Room room, DateTime startDate, DateTime endDate)
                  {
                      Console.WriteLine($"Standard reservation made for {room.RoomType} from {startDate.ToShortDateString()} to {endDate.ToShortDateString()}.");
                  }
              }

              // Estrategia VIP de reserva
              public class VIPReservationStrategy : IReservationStrategy
              {
                  public void Reserve(Room room, DateTime startDate, DateTime endDate)
                  {
                      Console.WriteLine($"VIP reservation made for {room.RoomType} from {startDate.ToShortDateString()} to {endDate.ToShortDateString()} with complimentary services.");
                  }
              }
          }

    # Crea interfaces y clases para Observer Pattern
    - name: Crear interfaces y clases para Observer Pattern
      copy:
        dest: /home/ubuntu/hotel_booking_app/IReservationObserver.cs
        owner: ubuntu
        group: ubuntu
        mode: '0644'
        content: |
          // Observer Pattern para notificar cambios en las reservas a otras partes interesadas
          using System;
          
          namespace HotelBooking
          {
              // Interfaz para el observador de reservas
              public interface IReservationObserver
              {
                  void Update(Reservation reservation);
              }

              // Observador concreto: Servicio de Limpieza
              public class CleaningService : IReservationObserver
              {
                  public void Update(Reservation reservation)
                  {
                      Console.WriteLine($"[CleaningService] Notificado: Limpieza programada para la habitación {reservation.Room.RoomType} del {reservation.StartDate.ToShortDateString()} al {reservation.EndDate.ToShortDateString()}.");
                  }
              }
          }

    # Crea la clase Reservation.cs
    - name: Crear clase Reservation.cs
      copy:
        dest: /home/ubuntu/hotel_booking_app/Reservation.cs
        owner: ubuntu
        group: ubuntu
        mode: '0644'
        content: |
          // Clase que representa una reserva
          using System;

          namespace HotelBooking
          {
              public class Reservation
              {
                  public Hotel Hotel { get; private set; }
                  public Room Room { get; private set; }
                  public DateTime StartDate { get; private set; }
                  public DateTime EndDate { get; private set; }

                  public Reservation(Hotel hotel, Room room, DateTime startDate, DateTime endDate)
                  {
                      Hotel = hotel;
                      Room = room;
                      StartDate = startDate;
                      EndDate = endDate;
                  }
              }
          }

    # Crea la clase ReservationManager.cs
    - name: Crear clase ReservationManager.cs
      copy:
        dest: /home/ubuntu/hotel_booking_app/ReservationManager.cs
        owner: ubuntu
        group: ubuntu
        mode: '0644'
        content: |
          // Clase que gestiona las reservas utilizando Strategy y Observer Patterns
          using System;
          using System.Collections.Generic;

          namespace HotelBooking
          {
              // Strategy Pattern: Uso de IReservationStrategy
              // Observer Pattern: Notificación a observadores sobre cambios en reservas
              public class ReservationManager
              {
                  private readonly IReservationStrategy reservationStrategy;
                  private readonly List<IReservationObserver> observers = new List<IReservationObserver>();

                  public ReservationManager(IReservationStrategy strategy, IEnumerable<IReservationObserver> observers)
                  {
                      reservationStrategy = strategy;
                      this.observers.AddRange(observers);
                  }

                  // Método para notificar a los observadores
                  private void Notify(Reservation reservation)
                  {
                      foreach (var observer in observers)
                      {
                          observer.Update(reservation);
                      }
                  }

                  // Método para realizar una reserva
                  public void MakeReservation(string roomType, DateTime startDate, DateTime endDate)
                  {
                      var hotel = Hotel.Instance;
                      var room = hotel.Rooms.Find(r => r.RoomType.Equals(roomType, StringComparison.OrdinalIgnoreCase));

                      if (room != null)
                      {
                          // Utiliza la estrategia de reserva seleccionada
                          reservationStrategy?.Reserve(room, startDate, endDate);

                          var reservation = new Reservation(hotel, room, startDate, endDate);
                          // Notifica a los observadores sobre la nueva reserva
                          Notify(reservation);
                      }
                      else
                      {
                          Console.WriteLine("Room not available.");
                      }
                  }
              }
          }
      # Nota: Se ha modificado la clase ReservationManager para utilizar inyección de dependencias.

    # Crea directorios para los controladores
    - name: Crear directorios para los controladores
      file:
        path: /home/ubuntu/hotel_booking_app/Controllers
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    # Crea el controlador ReservationsController.cs
    - name: Crear controlador ReservationsController.cs
      copy:
        dest: /home/ubuntu/hotel_booking_app/Controllers/ReservationsController.cs
        owner: ubuntu
        group: ubuntu
        mode: '0644'
        content: |
          // Controlador para gestionar las reservas vía API
          using Microsoft.AspNetCore.Mvc;
          using System;

          namespace HotelBooking.Controllers
          {
              [Route("api/[controller]")]
              [ApiController]
              public class ReservationsController : ControllerBase
              {
                  private readonly ReservationManager reservationManager;

                  // Inyección de dependencias de ReservationManager
                  public ReservationsController(ReservationManager manager)
                  {
                      reservationManager = manager;
                  }

                  // Endpoint HTTP POST para realizar una reserva
                  [HttpPost]
                  public IActionResult MakeReservation([FromBody] ReservationRequest request)
                  {
                      reservationManager.MakeReservation(request.RoomType, request.StartDate, request.EndDate);
                      return Ok("Reservation processed.");
                  }
              }

              // Clase para el modelo de solicitud de reserva
              public class ReservationRequest
              {
                  public string RoomType { get; set; }
                  public DateTime StartDate { get; set; }
                  public DateTime EndDate { get; set; }
              }
          }

    # Construye la aplicación de reservas de hotel
    - name: Construir la aplicación de reservas de hotel
      command: dotnet build /home/ubuntu/hotel_booking_app/HotelBooking.csproj
      args:
        chdir: /home/ubuntu/hotel_booking_app

    # Crea archivo de servicio systemd para la aplicación HotelBooking
    - name: Crear archivo de servicio systemd para la aplicación HotelBooking
      copy:
        dest: /etc/systemd/system/hotelbooking.service
        owner: root
        group: root
        mode: '0644'
        content: |
          [Unit]
          Description=HotelBooking .NET Core Application
          After=network.target

          [Service]
          WorkingDirectory=/home/ubuntu/hotel_booking_app
          ExecStart=/usr/bin/dotnet /home/ubuntu/hotel_booking_app/bin/Debug/net8.0/HotelBooking.dll
          Restart=always
          RestartSec=10
          SyslogIdentifier=hotelbooking
          User=ubuntu
          Environment=ASPNETCORE_ENVIRONMENT=Production

          [Install]
          WantedBy=multi-user.target

    # Recarga systemd para aplicar los cambios
    - name: Recargar systemd para aplicar los cambios
      command: systemctl daemon-reload

    # Habilita e inicia el servicio HotelBooking
    - name: Habilitar y iniciar el servicio HotelBooking
      systemd:
        name: hotelbooking
        enabled: yes
        state: restarted
