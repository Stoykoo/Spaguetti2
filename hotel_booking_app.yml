---
- name: Instalar .NET Core 8 y configurar la aplicación de reservas de hotel
  hosts: 127.0.0.1
  connection: local
  become: yes
  tasks:
  
    # Actualiza el sistema operativo para asegurarse de que todo esté actualizado
    
    - name: Actualizar el sistema
      apt:
        update_cache: yes
        upgrade: dist

    # Instala las dependencias necesarias para manejar repositorios y descargas
    
    - name: Instalar dependencias necesarias
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present

    # Descarga el paquete del repositorio de Microsoft para Ubuntu 24.04 LTS
    
    - name: Descargar el paquete de repositorio de Microsoft para Ubuntu 24.04 LTS
      get_url:
        url: https://packages.microsoft.com/config/ubuntu/24.04/packages-microsoft-prod.deb
        dest: /tmp/packages-microsoft-prod.deb

    # Instala el paquete de repositorio de Microsoft
    
    - name: Instalar el paquete de repositorio de Microsoft
      command: dpkg -i /tmp/packages-microsoft-prod.deb

    # Actualiza el caché de apt tras agregar el nuevo repositorio
    
    - name: Actualizar el caché de apt después de agregar el repositorio
      apt:
        update_cache: yes

    # Instala el SDK de .NET Core 8, necesario para desarrollar la aplicación
    
    - name: Instalar .NET SDK
      apt:
        name: dotnet-sdk-8.0
        state: present

    # Crea el directorio para la aplicación de reservas del hotel
    
    - name: Crear directorio para la aplicación de reservas de hotel
      file:
        path: /home/ubuntu/hotel_booking_app
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    # Crea el archivo del proyecto .NET con la configuración básica para .NET Core 8
    
    - name: Crear archivo del proyecto HotelBooking.csproj
      copy:
        dest: /home/ubuntu/hotel_booking_app/HotelBooking.csproj
        owner: ubuntu
        group: ubuntu
        mode: '0644'
        content: |
          <Project Sdk="Microsoft.NET.Sdk.Web">
            <PropertyGroup>
              <TargetFramework>net8.0</TargetFramework>
            </PropertyGroup>
          </Project>

    # Crea el archivo principal 'Program.cs' que inicia la aplicación web
    
    - name: Crear archivo Program.cs
      copy:
        dest: /home/ubuntu/hotel_booking_app/Program.cs
        owner: ubuntu
        group: ubuntu
        mode: '0644'
        content: |
          using System;
          using Microsoft.AspNetCore.Hosting;
          using Microsoft.Extensions.Hosting;

          namespace HotelBooking
          {
              public class Program
              {
                  public static void Main(string[] args)
                  {
                      CreateHostBuilder(args).Build().Run();
                  }

                  public static IHostBuilder CreateHostBuilder(string[] args) =>
                      Host.CreateDefaultBuilder(args)
                          .ConfigureWebHostDefaults(webBuilder =>
                          {
                              webBuilder.UseStartup<Startup>();
                          });
              }
          }

    # Crea el archivo 'Startup.cs' que configura los servicios y middlewares de la aplicación
    
    - name: Crear archivo Startup.cs
      copy:
        dest: /home/ubuntu/hotel_booking_app/Startup.cs
        owner: ubuntu
        group: ubuntu
        mode: '0644'
        content: |
          using Microsoft.AspNetCore.Builder;
          using Microsoft.AspNetCore.Hosting;
          using Microsoft.Extensions.DependencyInjection;
          using Microsoft.Extensions.Hosting;

          namespace HotelBooking
          {
              public class Startup
              {
                  public void ConfigureServices(IServiceCollection services)
                  {
                      services.AddControllers();
                      services.AddSingleton<Hotel>();  # Singleton Pattern: Instancia global de Hotel
                      services.AddScoped<ReservationManager>();  # Inyección de dependencias para el gestor de reservas
                      services.AddSingleton<IReservationStrategy, StandardReservationStrategy>();  # Strategy Pattern: Reserva estándar
                      services.AddSingleton<IReservationObserver, CleaningService>();  # Observer Pattern: Notifica al servicio de limpieza
                  }

                  public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
                  {
                      if (env.IsDevelopment())
                      {
                          app.UseDeveloperExceptionPage();
                      }
                      else
                      {
                          app.UseExceptionHandler("/Home/Error");
                          app.UseHsts();
                      }

                      app.UseRouting();
                      app.UseAuthorization();

                      app.UseEndpoints(endpoints =>
                      {
                          endpoints.MapControllers();
                      });
                  }
              }
          }

    # Define la clase 'Hotel.cs' con patrón Singleton para que solo haya una instancia del hotel
    
    - name: Crear clase Hotel.cs
      copy:
        dest: /home/ubuntu/hotel_booking_app/Hotel.cs
        owner: ubuntu
        group: ubuntu
        mode: '0644'
        content: |
          using System;
          using System.Collections.Generic;

          namespace HotelBooking
          {
              // Singleton Pattern: Hotel
              public sealed class Hotel
              {
                  private static readonly Lazy<Hotel> instance = new Lazy<Hotel>(() => new Hotel());

                  public string Name { get; private set; }
                  public List<Room> Rooms { get; private set; }

                  private Hotel()
                  {
                      Name = "Luxury Inn";
                      Rooms = new List<Room>();
                  }

                  public static Hotel Instance
                  {
                      get
                      {
                          return instance.Value;
                      }
                  }

                  public void AddRoom(Room room)
                  {
                      Rooms.Add(room);
                      Console.WriteLine($"Added {room.RoomType} room at ${room.Price} per night.");
                  }

                  public void PrintAvailableRooms()
                  {
                      Console.WriteLine("\nAvailable Rooms:");
                      foreach (var room in Rooms)
                      {
                          Console.WriteLine($"Room: {room.RoomType}, Price: ${room.Price}");
                      }
                  }
              }

              // Clase Room que define los tipos de habitaciones
              public class Room
              {
                  public string RoomType { get; set; }
                  public double Price { get; set; }
              }
          }

    # Define la clase RoomFactory.cs con el patrón Factory Method para crear diferentes tipos de habitaciones
    
    - name: Crear clase RoomFactory.cs
      copy:
        dest: /home/ubuntu/hotel_booking_app/RoomFactory.cs
        owner: ubuntu
        group: ubuntu
        mode: '0644'
        content: |
          using System;

          namespace HotelBooking
          {
              // Factory Method Pattern: RoomFactory
              public abstract class RoomFactory
              {
                  public abstract Room CreateRoom();
              }

              public class SingleRoomFactory : RoomFactory
              {
                  public override Room CreateRoom()
                  {
                      return new Room { RoomType = "Single", Price = 100 };
                  }
              }

              public class DoubleRoomFactory : RoomFactory
              {
                  public override Room CreateRoom()
                  {
                      return new Room { RoomType = "Double", Price = 200 };
                  }
              }

              public class SuiteRoomFactory : RoomFactory
              {
                  public override Room CreateRoom()
                  {
                      return new Room { RoomType = "Suite", Price = 300 };
                  }
              }
          }

    # Implementa el patrón Strategy para definir diferentes estrategias de reserva (estándar y VIP)
    
    - name: Crear interfaces y clases para Strategy Pattern
      copy:
        dest: /home/ubuntu/hotel_booking_app/IReservationStrategy.cs
        owner: ubuntu
        group: ubuntu
        mode: '0644'
        content: |
          using System;

          namespace HotelBooking
          {
              // Strategy Pattern: IReservationStrategy
              public interface IReservationStrategy
              {
                  void Reserve(Room room, DateTime startDate, DateTime endDate);
              }

              public class StandardReservationStrategy : IReservationStrategy
              {
                  public void Reserve(Room room, DateTime startDate, DateTime endDate)
                  {
                      Console.WriteLine($"Standard reservation made for {room.RoomType} from {startDate.ToShortDateString()} to {endDate.ToShortDateString()}.");
                  }
              }

              public class VIPReservationStrategy : IReservationStrategy
              {
                  public void Reserve(Room room, DateTime startDate, DateTime endDate)
                  {
                      Console.WriteLine($"VIP reservation made for {room.RoomType} from {startDate.ToShortDateString()} to {endDate.ToShortDateString()} with complimentary services.");
                  }
              }
          }

    # Define las interfaces y clases para el patrón Observer, notificando sobre reservas al servicio de limpieza
    - name: Crear interfaces y clases para Observer Pattern
      copy:
        dest: /home/ubuntu/hotel_booking_app/IReservationObserver.cs
        owner: ubuntu
        group: ubuntu
        mode: '0644'
        content: |
          using System;
          
          namespace HotelBooking
          {
              // Observer Pattern: IReservationObserver
              public interface IReservationObserver
              {
                  void Update(Reservation reservation);
              }

              // Ejemplo de un Observador: Servicio de Limpieza
              public class CleaningService : IReservationObserver
              {
                  public void Update(Reservation reservation)
                  {
                      Console.WriteLine($"[CleaningService] Notificado: Limpieza programada para la habitación {reservation.Room.RoomType} del {reservation.StartDate.ToShortDateString()} al {reservation.EndDate.ToShortDateString()}.");
                  }
              }
          }

    # Define la clase
