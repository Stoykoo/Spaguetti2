---
- name: Instalar .NET Core 8 y configurar la aplicación de tienda de celulares
  hosts: localhost
  become: yes
  tasks:
    - name: Actualizar el sistema
      apt:
        update_cache: yes
        upgrade: dist

    - name: Instalar dependencias necesarias
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present

    - name: Agregar el repositorio de Microsoft
      apt_repository:
        repo: "deb [arch=amd64] https://packages.microsoft.com/repos/ubuntu/ $(lsb_release -cs) main"
        state: present

    - name: Importar la clave de Microsoft
      apt_key:
        url: https://packages.microsoft.com/keys/microsoft.asc
        state: present

    - name: Instalar .NET SDK
      apt:
        name: dotnet-sdk-8.0
        state: present

    - name: Crear directorio para la aplicación
      file:
        path: /home/ubuntu/mobile_store_app
        state: directory
        mode: '0755'  # Asegurar permisos adecuados para el directorio

    - name: Crear archivo del proyecto
      copy:
        dest: /home/ubuntu/mobile_store_app/mobile_store_app.csproj
        content: |
          <Project Sdk="Microsoft.NET.Sdk.Web">

          <PropertyGroup>
              <TargetFramework>net8.0</TargetFramework>
          </PropertyGroup>

          </Project>

    - name: Crear archivo de código fuente
      copy:
        dest: /home/ubuntu/mobile_store_app/Program.cs
        content: |
          using System;
          using System.Collections.Generic;
          using Microsoft.AspNetCore.Hosting;
          using Microsoft.Extensions.Hosting;
          using Microsoft.AspNetCore.Builder;
          using Microsoft.Extensions.DependencyInjection;

          namespace MobileStoreApp
          {
              public class Program
              {
                  public static void Main(string[] args)
                  {
                      CreateHostBuilder(args).Build().Run();
                  }

                  public static IHostBuilder CreateHostBuilder(string[] args) =>
                      Host.CreateDefaultBuilder(args)
                          .ConfigureWebHostDefaults(webBuilder =>
                          {
                              webBuilder.UseStartup<Startup>();
                          });
              }

              public class Startup
              {
                  public void ConfigureServices(IServiceCollection services)
                  {
                      services.AddControllers();
                  }

                  public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
                  {
                      if (env.IsDevelopment())
                      {
                          app.UseDeveloperExceptionPage();
                      }
                      else
                      {
                          app.UseExceptionHandler("/Home/Error");
                          app.UseHsts();
                      }
                      app.UseHttpsRedirection();
                      app.UseRouting();
                      app.UseAuthorization();
                      app.UseEndpoints(endpoints =>
                      {
                          endpoints.MapControllers();
                      });
                  }
              }

              // Encapsulamiento de campos con propiedades
              public class Mobile
              {
                  public string Model { get; set; }
                  public string Brand { get; set; }
                  public double Price { get; set; }
                  public List<string> Features { get; set; } = new List<string>();

                  public void PrintDetails()
                  {
                      Console.WriteLine($"Modelo: {Model}, Marca: {Brand}, Precio: {Price:C}");
                      Console.WriteLine("Características:");
                      foreach (var feature in Features)
                      {
                          Console.WriteLine($"- {feature}");
                      }
                  }
              }

              // Factory Method para la creación de Mobile
              public abstract class MobileFactory
              {
                  public abstract Mobile CreateMobile(string model, string brand, double price, List<string> features);
              }

              public class ConcreteMobileFactory : MobileFactory
              {
                  public override Mobile CreateMobile(string model, string brand, double price, List<string> features)
                  {
                      return new Mobile { Model = model, Brand = brand, Price = price, Features = features };
                  }
              }

              // Implementación de StoreManager con Singleton y Factory Method
              public class StoreManager
              {
                  private static StoreManager _instance;
                  private MobileFactory _mobileFactory = new ConcreteMobileFactory();
                  public List<Mobile> Mobiles { get; private set; } = new List<Mobile>();

                  private StoreManager() {}

                  public static StoreManager GetInstance()
                  {
                      if (_instance == null)
                      {
                          _instance = new StoreManager();
                      }
                      return _instance;
                  }

                  public void AddMobile(string model, string brand, double price, List<string> features)
                  {
                      Mobile mobile = _mobileFactory.CreateMobile(model, brand, price, features);
                      Mobiles.Add(mobile);
                      mobile.PrintDetails();
                  }

                  // Aplicar el patrón Observer para notificar cambios
                  public event Action<string> InventoryChanged;

                  // Refactorización del método ProcessSale según SRP
                  public void ProcessSale(string model, int quantity)
                  {
                      Mobile mobile = Mobiles.Find(m => m.Model == model);
                      if (mobile != null)
                      {
                          Console.WriteLine($"Procesando la venta de {quantity} unidades del modelo {mobile.Model}");
                          InventoryChanged?.Invoke(mobile.Model);  // Notificar el cambio en el inventario
                      }
                      else
                      {
                          Console.WriteLine("Modelo no encontrado");
                      }
                  }
              }

              // Implementación de Strategy para el manejo de descuentos
              public interface IDiscountStrategy
              {
                  void ApplyDiscount(Mobile mobile);
              }

              public class BrandXDiscountStrategy : IDiscountStrategy
              {
                  public void ApplyDiscount(Mobile mobile)
                  {
                      mobile.Price *= 0.9;
                      Console.WriteLine($"Descuento aplicado a {mobile.Model}. Nuevo precio: {mobile.Price:C}");
                  }
              }

              public class Promotion
              {
                  private IDiscountStrategy _discountStrategy;

                  public Promotion(IDiscountStrategy discountStrategy)
                  {
                      _discountStrategy = discountStrategy;
                  }

                  public void ApplyDiscount(Mobile mobile)
                  {
                      _discountStrategy.ApplyDiscount(mobile);
                  }
              }

              // Separación de responsabilidades (SRP) en InventoryManager y BillingManager
              public class InventoryManager
              {
                  private List<Mobile> inventory = new List<Mobile>();

                  public void AddToInventory(Mobile mobile)
                  {
                      inventory.Add(mobile);
                  }
              }

              public class BillingManager
              {
                  public void GenerateBill(Mobile mobile, int quantity)
                  {
                      double total = mobile.Price * quantity;
                      Console.WriteLine($"Factura: {mobile.Model} x{quantity} = {total:C}");
                  }
              }

              // Implementación del patrón Facade para simplificar las interacciones entre inventario y facturación
              public class StoreFacade
              {
                  private InventoryManager inventoryManager = new InventoryManager();
                  private BillingManager billingManager = new BillingManager();

                  public void AddMobileToInventory(Mobile mobile)
                  {
                      inventoryManager.AddToInventory(mobile);
                  }

                  public void BillCustomer(Mobile mobile, int quantity)
                  {
                      billingManager.GenerateBill(mobile, quantity);
                  }
              }

              // Implementación del patrón Decorator para agregar características adicionales a Mobile
              public abstract class MobileDecorator : Mobile
              {
                  protected Mobile _mobile;

                  public MobileDecorator(Mobile mobile)
                  {
                      _mobile = mobile;
                  }

                  public override void PrintDetails()
                  {
                      _mobile.PrintDetails();
                  }
              }

              public class ExtraWarrantyDecorator : MobileDecorator
              {
                  public ExtraWarrantyDecorator(Mobile mobile) : base(mobile) {}

                  public override void PrintDetails()
                  {
                      base.PrintDetails();
                      Console.WriteLine("Garantía extendida agregada.");
                  }
              }

              // Implementación del patrón Chain of Responsibility para manejo de descuentos en promociones
              public abstract class DiscountHandler
              {
                  protected DiscountHandler _nextHandler;

                  public void SetNext(DiscountHandler nextHandler)
                  {
                      _nextHandler = nextHandler;
                  }

                  public abstract void HandleDiscount(Mobile mobile);
              }

              public class SeasonalDiscountHandler : DiscountHandler
              {
                  public override void HandleDiscount(Mobile mobile)
                  {
                      if (/* lógica para descuento estacional */ true)
                      {
                          mobile.Price *= 0.9;
                          Console.WriteLine($"Descuento estacional aplicado. Nuevo precio: {mobile.Price:C}");
                      }
                      else if (_nextHandler != null)
                      {
                          _nextHandler.HandleDiscount(mobile);
                      }
                  }
              }

              public class BrandDiscountHandler : DiscountHandler
              {
                  public override void HandleDiscount(Mobile mobile)
                  {
                      if (mobile.Brand == "BrandX")
                      {
                          mobile.Price *= 0.85;
                          Console.WriteLine($"Descuento por marca aplicado. Nuevo precio: {mobile.Price:C}");
                      }
                      else if (_nextHandler != null)
                      {
                          _nextHandler.HandleDiscount(mobile);
                      }
                  }
              }
          }

    - name: Construir la aplicación de tienda de celulares
      command: dotnet build /home/ubuntu/mobile_store_app/mobile_store_app.csproj
      args:
        chdir: /home/ubuntu/mobile_store_app

    - name: Ejecutar la aplicación
      command: dotnet run --urls "http://0.0.0.0:5000"
      args:
        chdir: /home/ubuntu/mobile_store_app
      async: 10  # Ejecutar el comando de forma asíncrona
      poll: 0  # No esperar la finalización del comando
